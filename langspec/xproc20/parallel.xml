<?xml version='1.0'?>
<appendix xmlns="http://docbook.org/ns/docbook"
	  xmlns:xlink="http://www.w3.org/1999/xlink"
	  xmlns:xi="http://www.w3.org/2001/XInclude"
	  version="5.0-extension w3c-xproc"
	  xml:id="parallelism">
<title>Sequential steps, parallelism, and side-effects</title>

<para>XProc imposes as few constraints on the order in which steps
must be evaluated as possible and almost no constraints on parallel
execution.</para>

<para>In the simple, and we believe overwhelmingly common case, inputs
flow into the pipeline, through the pipeline from one step to the
next, and results are produced at the end. The order of the steps is
constrained by the input/output connections between them.
Implementations are free to execute them in a purely sequential
fashion or in parallel, as they see fit. The results are the same in
either case.</para>

<para>This is not true for pipelines which rely on side effects, such
as the state of the filesystem or the state of the web. Consider
the following pipeline:</para>

<programlisting
><xi:include href="examples/par1.xml" parse="text"/></programlisting>

<para>There's no guarantee that “style” step will execute after the
“save-xslt” step. In this case, the solution is straightforward. Even
if you need the saved stylesheet, you don't need to rely on it in your
pipeline:</para>

<programlisting
><xi:include href="examples/par1b.xml" parse="text"/></programlisting>

<para>Now the result is independent of the implementation strategy.</para>

<para>Implementations are free to invent additional control structures
using <tag>p:pipeinfo</tag> and
<link linkend="extension-attributes">extension attributes</link> to provide
greater control over parallelism in their implementations.</para>

</appendix>
